SOON

- document file and directory formats
- unit test coverage
- update usage documentation

- ability to thin out (merge) older deltas
- force creation of full backups
- adapting to changing sizes is important to us as we resize volumes all the time
    - ensure resizing works properly over multiple deltas

- scrubbing: consistency between block sums and number of blocks
- scrubbing: chain of parent pointers
- does scrubbing validate the total checksum? (esp. for diffs?)

- what are our error conditions and follow up errors if a backup fails?
    - i can see that we loose the whole history if we update an existing full into a new delta and fail in between. need multiple atomic steps?

- keep a log of all backy operations (incl. scrubbing, etc)
- provide reasonable status output and history for monitoring tools and auditing
- implement posix locking on backup files to avoid conflicts
- we should be fsyncing

- implement a scheduler for multiple sources (that can verify)

- simple compound call/configuration (e.g. for many rbd volumes)
  to avoid overloading systems. e.g. by paying attention whether other backy processes are running (does posix have semaphores?)

  alternatively we could try to limit reading/writing to a certain number
  of blocks per second


LATER

- fuse layer to enable direct (loop-mountable) access to old versions
- get fadvice back
- port gocept.directory "dynamic bytes" display



FAR FUTURE / NOT SURE IDEAS

- ability to store blocks in a simple big pool using their hash?
-- may not be that helpful as we really want the primary full backups to 
   be directly, low-level copyable
- allow hunting down and reintegrating replacements blocks if they do 
   exist in some copy
- provide some level of filesystem integration to perform extended scrubbing, like running appropriate fscks.
- implement detection which blocks are actually used by the filesystem and optionally limit backups (for thin provisioning)
  to those areas
- check /proc, /sys or some other interface to detect which blocks were written to
- make explicit use of Python file's buffer argument (it should be 0 or chunk I think, but definitely not line-based)

